# –æ—Å—Ç–∞–≤—å –Ω–∞–¥–µ–∂–¥—É –≤—Å—è–∫ —Å—é–¥–∞ –≤—Ö–æ–¥—è—â–∏–π
# todo: –¥–æ–±–∞–≤–∏—Ç—å –∫–æ–º–º–µ–Ω–∞—Ç—Ä–∏–∏ –∫ /translate –∏ —á—Ç–æ-—Ç–æ –µ—â—ë
# –≤ –ø–æ—Å–ª–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –º–Ω–µ –≤—Å—ë —Ç—Ä—É–¥–Ω–µ–µ –∏ —Ç—Ä—É–¥–Ω–µ–µ –æ—Ä–∏–µ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å—Å—è –≤ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ–º –∫–æ–¥–µ. –≤—Å—ë —Ç–∞–∫–æ–µ —Ü–≤–µ—Ç–∞—Å—Ç–æ–µ –∏ –≤—ã–¥–µ–ª–µ–Ω–Ω–æ–µ...

#                                               < +++ –ë–ò–ë–õ–ò–û–¢–ï–ö–ò +++ >

import os
import random
import logging
import time
import telebot

from dotenv import load_dotenv
from telebot import types
from selenium import webdriver
from selenium.webdriver.chrome.options import Options
from selenium.common.exceptions import NoSuchElementException

#                                 < +++ –û–ë–û–ó–ù–ê–ß–ï–ù–ò–ï –ù–ï–û–ë–•–û–î–ò–ú–´–• –ü–ï–†–ï–ú–ï–ù–ù–´–• +++ >

load_dotenv()   # –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è .env

logging.basicConfig(filename='log.txt', level=logging.INFO,                                             # –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
                    format='%(asctime)s : %(levelname)s ::: %(message)s', datefmt='%Y-%m-%d %H:%M:%S')  # –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è

telegroup = os.getenv('GROUP')
KEY = os.getenv('API_KEY')                          # –ø–æ–ª—É—á–µ–Ω–∏–µ .env
bot = telebot.TeleBot(KEY)                          # –µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ

logging.info('<---+--->\nStarting new session')     # –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ

chrome_options = Options()                          # –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Ö—Ä–æ–º–∞ –≤ —Å–≤—ë—Ä–Ω—É—Ç–æ–º –≤–∏–¥–µ
chrome_options.add_argument("--headless")           # –ø–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è –≤—Å–µ—Ö –≤–µ—Ä—Å–∏–π

driver = webdriver.Chrome(options=chrome_options)   # –Ω–µ–ø–æ—Å—Ä–µ–¥—Å—Ç–≤–µ–Ω–Ω–æ –∑–∞–ø—É—Å–∫

#                                           < +++ –û–ë–†–ê–ë–û–¢–ö–ê –ö–û–ú–ê–ù–î +++ >

#                                               < +++ START +++ >


@bot.message_handler(commands=['start'])            # –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä –∫–æ–º–∞–Ω–¥—ã. –∏–º–µ–Ω–Ω–æ —Å –ø–æ–º–æ—â—å—é –Ω–µ–≥–æ —Ä–∞–±–æ—Ç–∞–µ—Ç —Ñ—É–Ω–∫—Ü–∏—è –Ω–∏–∂–µ
def start(message):                                 # –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ñ—É–Ω–∫—Ü–∏–∏
    bot.send_message(message.chat.id, f'–ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name} {message.from_user.last_name}!\n'
                                      '–Ø - –ú–∏–Ω–∞–∫–æ –ú–∞—Ç—Å—É—à–∏–º–∞, —É—á–µ–Ω–∏—Ü–∞ —Å—Ç–∞—Ä—à–µ–π —à–∫–æ–ª—ã. –Ø —É—á—É —Ä—É—Å—Å–∫–∏–π —è–∑—ã–∫ —É–∂–µ –Ω–∞ '
                                      '–ø—Ä–æ—Ç—è–∂–µ–Ω–∏–∏ –ø—è—Ç–∏ –ª–µ—Ç. –•–æ—Ç—å –µ–≥–æ —è –∑–Ω–∞—é –ø–ª–æ—Ö–æ, –Ω–æ —É–ø–æ—Ä–Ω–æ —Å—Ç–∞—Ä–∞—é—Å—å –∏ —É—á—É '
                                      '–µ–≥–æ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å, –ø–æ—ç—Ç–æ–º—É –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ –º–æ–∏ —Ä–µ–ø–ª–∏–∫–∏ –º–æ–≥—É—Ç –±—ã—Ç—å –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ '
                                      '–∏–ª–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º–∏. –ê –µ—â—ë —è –∏–Ω–æ–≥–¥–∞ –≤–µ–¥—É —Å–µ–±—è –∫–∞–∫ —Ä–æ–±–æ—Ç. –î–∞, –∏ –Ω–µ –ø–∏—à–∏ –º–Ω–µ –Ω–æ—á—å—é. '
                                      '–Ø —Å–ø–ª—é.\n–ê —ç—Ç–æ –≤–µ—Å—å —Å–ø–∏—Å–æ–∫ –º–æ–∏—Ö –∫–æ–º–∞–Ω–¥: ', parse_mode='MARKDOWN')
    commands(message)                                                   # –≤—ã–∑–æ–≤ —Ñ-—Ü–∏–∏ commands —Å –ø–æ–º–æ—â—å—é /commands
    logging.info(f'/start: New user - {message.from_user.username}')    # –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã


#                                           < +++ RECEIVE(CALL) +++ >


@bot.callback_query_handler(func=lambda call: True)
def receive(call):
    if call.data == 'dice_repeat':
        dice(call.message)
        bot.delete_message(chat_id=call.message.chat.id, message_id=call.message.message_id)


#                                             < +++ HELLO +++ >


@bot.message_handler(commands=['hello'])
def hello(message):
    bot.reply_to(message, f'–ü—Ä–∏–≤–µ—Ç, @{message.from_user.username}! –ö–∞–∫ –¥–µ–ª–∞?')
    logging.info(f'{message.from_user.username} typed /hello')


#                                             < +++ HELP +++ >


@bot.message_handler(commands=['help'])
def commands(message):
    bot.send_message(message.chat.id, '`< –û–±—â–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è >`\n'
                                      '`/help - –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤–µ—Å—å —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥\n`'
                                      '`/info - –æ–±–æ –º–Ω–µ`\n\n'
                                      '`< –ü—Ä–æ—Å—Ç–µ–π—à–∏–µ –∫–æ–º–∞–Ω–¥—ã >\n`'
                                      '`/hello - –∑–¥–æ—Ä–æ–≤–∞–µ—Ç—Å—è —Å –Ω–∞–ø–∏—Å–∞–≤—à–∏–º`\n'
                                      '`/dice - –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä —Å–ª—É—á–∞–π–Ω—ã—Ö —á–∏—Å–µ–ª (–∏–ª–∏ D100)`\n'
                                      '`/8ball - —à–∞—Ä –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π`\n\n'
                                      '`< –ü–æ–∏—Å–∫ >\n`'
                                      '`/search - –ø–æ–∏—Å–∫ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –±–µ–∑ –ø–æ–º–æ—â–∏ –±—Ä–∞—É–∑–µ—Ä–∞\n`'
                                      '`/yt - –ø–æ–∏—Å–∫ –≤–∏–¥–µ–æ –Ω–∞ youtube.com\n`'
                                      '`/music - –ø–æ–∏—Å–∫ –º—É–∑—ã–∫–∏ –Ω–∞ sefon.pro\n`'
                                      '`/translate, /tr - –ø–µ—Ä–µ–≤–æ–¥ —Ç–µ–∫—Å—Ç–∞`', parse_mode="MARKDOWN")
    logging.info(f'{message.from_user.username} typed /help')


#                                             < +++ INFO +++ >


@bot.message_handler(commands=['info'])
def info(message):
    bot.send_message(message.chat.id, '–ü—Ä–∏–≤–µ—Ç. –ú–µ–Ω—è –∑–æ–≤—É—Ç –ú–∏–Ω–∞–∫–æ –ú–∞—Ç—Å—É—à–∏–º–∞. –Ø —Å—Ç—É–¥–µ–Ω—Ç–∫–∞ —Å—Ç–∞—Ä—à–µ–π —à–∫–æ–ª—ã. '
                                      '–Ø —É—á—É —Ä—É—Å—Å–∫–∏–π —è–∑—ã–∫ —É–∂–µ –ø—è—Ç—å –ª–µ—Ç. –ú–æ–∏ –∑–Ω–∞–Ω–∏—è –Ω–µ –æ—á–µ–Ω—å –±–æ–ª—å—à–∏–µ, –Ω–æ '
                                      '—É –º–µ–Ω—è –º–Ω–æ–≥–æ —Ä—É—Å—Å–∫–∏—Ö –∏ —É–∫—Ä–∞–∏–Ω—Å–∫–∏—Ö –¥—Ä—É–∑–µ–π. –Ø —Ö–æ—á—É –ø—Ä–∞–∫—Ç–∏–∫–æ–≤–∞—Ç—å—Å—è –∏ '
                                      '—É—á–∏—Ç—å—Å—è –±–æ–ª—å—à–µ. –î–∞–≤–∞–π—Ç–µ –¥—Ä—É–∂–∏—Ç—å!\n–ú–æ–π –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è: 24 –∏—é–ª—è 2004 –≥–æ–¥–∞.')
    logging.info(f'{message.from_user.username} typed /info')


#                                             < +++ DICE +++ >


@bot.message_handler(commands=['dice'])
def dice(message):
    markup = types.InlineKeyboardMarkup()
    btn = types.InlineKeyboardButton(text='üé≤ –ö–∏–Ω—É—Ç—å –∫—É–±–∏–∫ –µ—â—ë —Ä–∞–∑', callback_data='dice_repeat')
    markup.add(btn)
    dicenum = str(random.randint(0, 100))
    bot.send_message(message.chat.id, f'_–ú–∏–Ω–∞–∫–æ –∫–∏–Ω—É–ª–∞ 100-–≥—Ä–∞–Ω–Ω—ã–π –∫—É–±–∏–∫_\n'
                                      f'–ß–∏—Å–ª–æ {dicenum} –ø–æ–∫–∞–∑–∞–ª–æ—Å—å –Ω–∞ –µ–≥–æ –≤–µ—Ä—Ö–Ω–µ–π –≥—Ä–∞–Ω–∏',
                     parse_mode='MARKDOWN', reply_markup=markup)
    logging.info(f'/dice: {message.from_user.username} got {dicenum}.')


#                                            < +++ 8BALL +++ >


@bot.message_handler(commands=['8ball'])
def eightball(message):
    randomlist = ['–≥–æ–≤–æ—Ä–∏—Ç "–¥–∞"', '—É–≤–µ—Ä–µ–Ω –≤ –ø—Ä–∞–≤–æ—Ç–µ —ç—Ç–æ–π —Ñ—Ä–∞–∑—ã', '–Ω–µ —Å–æ–º–Ω–µ–≤–∞–µ—Ç—Å—è –≤ –∏—Å—Ç–∏–Ω–Ω–µ', '—É–≤–µ—Ä—è–µ—Ç —Ç–µ–±—è –≤ –ø—Ä–∞–≤–¥–µ',
                  '–Ω–µ —É–≤–µ—Ä–µ–Ω –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç–∏', '–≥–æ–≤–æ—Ä–∏—Ç "—Å–∫–æ—Ä–µ–µ –≤—Å–µ–≥–æ"', '–ø–æ—á—Ç–∏ —É–≤–µ—Ä–µ–Ω', '–Ω–µ –¥–æ –∫–æ–Ω—Ü–∞ —É–≤–µ—Ä–µ–Ω',
                  '–Ω–µ –∑–Ω–∞–µ—Ç', '–ø—Ä–æ—Å–∏—Ç –ø–æ–≤—Ç–æ—Ä–∏—Ç—å', '–Ω–µ –º–æ–∂–µ—Ç –ø—Ä–µ–¥—Å–∫–∞–∑–∞—Ç—å', '–Ω–µ –ø–æ–Ω–∏–º–∞–µ—Ç –≤–æ–ø—Ä–æ—Å–∞',
                  '–≥–æ–≤–æ—Ä–∏—Ç "–Ω–µ—Ç"', '—Å–æ–æ–±—â–∞–µ—Ç "–ª—É—á—à–µ —Ç–µ–±–µ –Ω–µ –∑–Ω–∞—Ç—å"', '—É–≤–µ—Ä–µ–Ω –≤ –æ—Ç–≤–µ—Ç–µ "–Ω–µ—Ç"', '–≥–æ–≤–æ—Ä–∏—Ç –æ –∑–Ω–∞–∫–∞—Ö, –∏ '
                                                                                              '–æ–Ω–∏ —É–∫–∞–∑—ã–≤–∞—é—Ç –Ω–∞ "–Ω–µ—Ç"']
    randomphrase = random.choice(randomlist)
    bot.reply_to(message, '–û, –≤–µ–ª–∏–∫–∏–π —à–∞—Ä –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π! –û—Ç–∫—Ä–æ–π –Ω–∞–º –≥–ª–∞–∑–∞ –∏ –ø–æ–∫–∞–∂–∏ –∏—Å—Ç–∏–Ω–Ω—É!\n'
                          '_–ú–∏–Ω–∞–∫–æ —Å–º–æ—Ç—Ä–∏—Ç –≤ —à–∞—Ä_\n'
                          f'–®–∞—Ä {randomphrase}.', parse_mode='MARKDOWN')
    logging.info(f'/8ball: {message.from_user.username} typed {message.text} and got "{randomphrase}" phrase.')


#                                           < +++ SEARCH +++ >


@bot.message_handler(commands=['search'])
def search_func(message):

    markup = types.InlineKeyboardMarkup()                                           # –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–Ω–æ–ø–∫–∏
    markup.add(types.InlineKeyboardButton('‚å® –ó–∞–≥—É–≥–ª–∏—Ç—å', url='google.com'))         # –ø–æ–∏—Å–∫–∞ —Å–Ω–∏–∑—É

    try:                                                                            # –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        search = message.text.split(" ", 1)[1]                                      # –æ—Ç–¥–µ–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –∫–æ–º–∞–Ω–¥—ã
    except IndexError:
        bot.reply_to(message, '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ —Ç–µ–∫—Å—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞! –ù–µ –±–µ—Å–ø–æ–∫–æ–π –º–µ–Ω—è –ø–æ –ø—É—Å—Ç—è–∫–∞–º!\n')
        return

    driver.get(f"https://www.google.com/")  # –ø–µ—Ä–µ—Ö–æ–¥ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –ø–æ–∏—Å–∫–∞

    page = driver.find_element_by_xpath("//input[@class='gLFyf gsfi']")             # –ø–æ–∏—Å–∫ –º–µ—Å—Ç–∞ –¥–ª—è –≤–≤–æ–¥–∞ —Ç–µ–∫—Å—Ç–∞
    page.send_keys(search)     # –ø–æ–∏—Å–∫ —Ç–µ–∫—Å—Ç–∞
    page.submit()              # Enter
    searchlink = driver.find_element_by_xpath("//div[@class='yuRUbf']/a").get_attribute("href")   # –ø–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞

    bot.reply_to(message, '–≠—Ç–∞ —Å—Å—ã–ª–∫–∞ –¥–æ–ª–∂–Ω–∞ —Ç–µ–±–µ –ø–æ–º–æ—á—å. –ö–æ–≥–¥–∞-–Ω–∏–±—É–¥—å —è —É—Å—Ç–∞–Ω—É –∏—Å–∫–∞—Ç—å –∑–∞ –≤–∞—Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é...\n'
                          f'{searchlink}', reply_markup=markup)     # –≤—ã–≤–µ–¥–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –ø–æ–∏—Å–∫–∞ –∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–∫–∏
    logging.info(f'/search: {message.from_user.username} tried to find "{search}".')   # –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞


#                                             < +++ YT +++ >


@bot.message_handler(commands=['yt'])
def yt(message):

    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton('‚ñ∂Ô∏è –ù–∞–π—Ç–∏ –≤–∏–¥–µ–æ', url='https://www.youtube.com/'))

    try:
        search_yt = message.text.split(" ", 1)[1]
    except IndexError:
        bot.reply_to(message, '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ —Ç–µ–∫—Å—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞! –ù–µ –±–µ—Å–ø–æ–∫–æ–π –º–µ–Ω—è –ø–æ –ø—É—Å—Ç—è–∫–∞–º!\n')
        return

    driver.get(f"https://www.youtube.com/results?search_query={search_yt}")

    yt_link = driver.find_element_by_xpath("//a[@id='video-title']").get_attribute("href")

    bot.reply_to(message, f'–î–µ—Ä–∂–∏ –≤–∏–¥–µ–æ.\n{yt_link}', reply_markup=markup)
    logging.info(f"/yt: {message.from_user.username} tried to find '{search_yt}' video.")


#                                           < +++ MUSIC +++ >


@bot.message_handler(commands=['music'])
def music(message):

    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton('üéµ –ù–∞–π—Ç–∏ –º—É–∑—ã–∫—É', url='https://sefon.pro/'))
    markup.add(types.InlineKeyboardButton('‚ñ∂Ô∏è –ù–∞–π—Ç–∏ –∫–ª–∏–ø', url='https://www.youtube.com/'))
    markup.add(types.InlineKeyboardButton('‚å® –ò—Å–∫–∞—Ç—å –º—É–∑—ã–∫—É –ø–æ –≤—Å–µ–º—É –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É', url='https://google.com/'))

    try:
        search_music = message.text.split(" ", 1)[1]
    except IndexError:
        bot.reply_to(message, '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ —Ç–µ–∫—Å—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞! –ù–µ –±–µ—Å–ø–æ–∫–æ–π –º–µ–Ω—è –ø–æ –ø—É—Å—Ç—è–∫–∞–º!\n')
        return

    driver.get(f"https://sefon.pro/search/?q={search_music}")

    try:

        divhref = driver.find_element_by_xpath("//div[@class='song_name']/a").get_attribute("href")
        divclickable = driver.find_element_by_xpath("//div[@class='song_name']/a").text
        driver.find_element_by_link_text(divclickable).click()

        time.sleep(1)

        div = driver.find_elements_by_xpath("//div[@class='list']/p")
        date = div[1].text
        form = div[2].text
        size = div[4].text
        dur = div[5].text

        bot.reply_to(message, f'–î–µ—Ä–∂–∏ –ø–µ—Å–Ω—é:\n{divhref}\n{date}\n{form}\n{size}\n{dur}', reply_markup=markup)
        logging.info(f"/music: {message.from_user.username} tried to find '{search_music}' music.")

    except NoSuchElementException:

        bot.reply_to(message, f'–Ø –Ω–µ —Å–º–æ–≥–ª–∞ –Ω–∞–π—Ç–∏ —ç—Ç—É –ø–µ—Å–Ω—é üôÅ\n–ü–æ–ø—Ä–æ–±—É–π –Ω–∞–π—Ç–∏ —Å–∞–º. '
                              '–¢—ã —Ç–∞–∫–∂–µ –º–æ–∂–µ—à—å –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è /search –∏ /yt.', reply_markup=markup)
        logging.info(f"/music: {message.from_user.username} didn't succeed in searching for '{search_music}' music.")


#                                       < +++ TRANSLATE +++ >


@bot.message_handler(commands=['translate', 'tr'])
def translate(message):

    markup = types.InlineKeyboardMarkup()

    try:
        lang = message.text.split(" ", 3)
        first_lang = lang[1]
        second_lang = lang[2]
        text_to_tr = lang[3]
    except IndexError:
        bot.reply_to(message, '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –≤–≤–µ–¥–∏ —è–∑—ã–∫ —Ç–µ–∫—Å—Ç–∞, –Ω–∞–ø—Ä–∏–º–µ—Ä ru, –∞ –ø–æ—Ç–æ–º —è–∑—ã–∫, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–π —Ç–µ–∫—Å—Ç '
                              '–Ω—É–∂–Ω–æ –ø–µ—Ä–µ–≤–µ—Å—Ç–∏, –Ω–∞–ø—Ä–∏–º–µ—Ä en. –ù–µ –±–µ—Å–ø–æ–∫–æ–π –º–µ–Ω—è –ø–æ –ø—É—Å—Ç—è–∫–∞–º!\n')
        return

    driver.get(f'https://translate.google.com/?hl=ru&sl={first_lang}&tl={second_lang}&op=translate')

    input_field = driver.find_element_by_xpath("//textarea[@class='er8xn']")
    input_field.send_keys(text_to_tr)

    driver.implicitly_wait(1)

    try:
        tr_text = driver.find_element_by_xpath("//span[@class='VIiyi']/span/span").text
    except NoSuchElementException:
        bot.reply_to(message, "–•–º–º... –ú–Ω–µ –Ω–∞–¥–æ –ø–æ–¥—É–º–∞—Ç—å...")
        driver.implicitly_wait(5)
        tr_text = driver.find_element_by_xpath("//span[@class='VIiyi']/span/span").text

    driver.implicitly_wait(1)

    try:
        transcript = driver.find_element_by_xpath("//div[@class='UdTY9 BwTYAc Yb6eTe']/div").text
    except NoSuchElementException:
        transcript = "<–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç>"

    # –≥–æ—Å–ø–æ–¥–∏ –ø—Ä–æ—Å—Ç–∏ –º–Ω–µ 3 —Å—Ç—Ä–æ–∫–∏ –Ω–∏–∂–µ. –±–æ–ª–µ–µ –Ω–µ—É–¥–æ–±–Ω—ã—Ö —Å—Ç—Ä–æ—á–µ–∫ —è –µ—â—ë –Ω–µ –ø–∏—Å–∞–ª
    markup.add(types.InlineKeyboardButton('üìñ –ü–µ—Ä–µ–≤–µ—Å—Ç–∏',
                                          url=f'https://translate.google.com/?hl=ru&sl={first_lang}&tl={second_lang}'
                                              f'&text={text_to_tr}&op=translate'))

    bot.reply_to(message, f'_–ú–∏–Ω–∞–∫–æ –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç —Å–ª–æ–≤–∞—Ä—å_\n–ê—Ö –¥–∞! –í–æ—Ç –ø–µ—Ä–µ–≤–æ–¥ —Ç–≤–æ–µ–≥–æ —Å–ª–æ–≤–∞: \n"{tr_text}".\n–ï–≥–æ '
                          f'—Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è: \n"{transcript}"',
                 parse_mode="MARKDOWN", reply_markup=markup)

    logging.info(f"/tr: {message.from_user.username} tried to translate '{text_to_tr}' from '{first_lang}' to"
                 f" '{second_lang}' and got '{tr_text}' text.")


if __name__ == "__main__":
    bot.polling(none_stop=True)
